% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/game_evaluate.R
\name{evaluate_treaty}
\alias{evaluate_treaty}
\title{Evaluate the treaty scenario}
\usage{
evaluate_treaty(params, aquifer_type = NULL)
}
\arguments{
\item{params}{Parameter list (or data.frame with 1 row) containing
necessary parameters to evaluate the agreement. See \code{?check_params} for details.}

\item{aquifer_type}{Aquifer type as "confined" or "unconfined". If not specified
(default) \code{check_params} is run and used to determine the aquifer type.}
}
\value{
Returns a 1-row tibble containing pumping, utility ranges needed for the treaty,
and whether or not there is a treaty (i.e., if zRange > 0).

If the aquifer in the
game is confined (see \code{?check_params} for how aquifer type is determined)  the solution is
exact. If the aquifer is unconfined, the solution is calculated numerically using \code{multiroot}
from the \code{rootSolve} package, using default tolerance parameters. This means that there
could be small errors in the results for \code{zMinSwiss} and \code{zMaxFrench}. For unconfined aquifers,
\code{zRange} is rounded to the 6th decimal place to minimize the effect of numerical errors on
the treaty outcome. If necessary, it can be recalculated as \code{zRange = zMaxFrench - zMinSwiss}.
}
\description{
Evaluate whether or not the treaty will be made in a confined or unconfined aquifer
}
\details{
Evaluate the treaty given social, economic, and geophysical parameters.

Note that the cost
of pumping is linear for confined aquifers, and nonlinear for unconfined aquifers, with the
nonlinearity depending on the parameter l, with the key feature that the cost become infinite
as h -> 0. For l = 0, the cost function is exponential and crosses 0 when h_i = dB_i. As l increases
towards 1, the solution becomes more linear when the water table is near the surface. When l == 1,
a linear solution is used and the cost remains linear even when the aquifer is fully depleted.
}
\examples{
evaluate_treaty(example_params_confined)
evaluate_treaty(example_params_unconfined)
}
