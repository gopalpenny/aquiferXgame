% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/game_evaluate.R
\name{evaluate_treaty_cases}
\alias{evaluate_treaty_cases}
\title{Evaluate multiple treaty scenarios}
\usage{
evaluate_treaty_cases(params_df, return_criteria = "qp",
  progress_bar = FALSE)
}
\arguments{
\item{params_df}{Data.frame of parameters with each row sent to \code{evaluate_treaty()}.}

\item{return_criteria}{Character string containing letters that indicate output variables. See details.}

\item{progress_bar}{Show a progress bar. Useful in unconfined aquifers for large N}
}
\value{
Returns a \code{tibble} containing z-values needed for the treaty
and whether or not there is a treaty (i.e., if zRange > 0), as well as output specified by \code{return_criteria}.

If the aquifer in the game is confined (see \code{?check_params} for how aquifer type is determined)  the solution is
exact. If the aquifer is unconfined, the solution is calculated numerically using \code{multiroot}
from the \code{rootSolve} package, using default tolerance parameters. This means that there
could be small errors in the results for \code{zMinSwiss} and \code{zMaxFrench}. For unconfined aquifers,
\code{zRange} is rounded to the 6th decimal place to minimize the effect of numerical errors on
the treaty outcome. If necessary, it can be recalculated as \code{zRange = zMaxFrench - zMinSwiss}.

In unconfined aquifers, it is possible that the game converges on a result that allows the aquifer
to be fully depleted for as least one of the players (hi < 0). In this case, the results will included
three additional columns:
\code{AD_fb,AD_nash,AD_cheat}, representing logical values that indicate in which scenario the aquifer was depleted
(first best, nash, or cheat). In the nonlinear game, this *should* only happen in one of two scenarios:
\enumerate{
\item A treaty is signed to maximize join utility, but a cheat pumps more and the aquifer
  is depleted for the other player. In this case, the treaty is set to "N", even if trust is equal to 1.
\item The numerical root finder jumps to a value where the aquifer is fully depleted.
  This is unlikely, as the initial guesses are set to minimize the change of this occurring.
}
}
\description{
Evaluate whether or not the treaty will be made under multiple scenarios
}
\details{
Evaluate the treaty given multiple combinations of social, economic,
and geophysical parameters.
This function takes a data.frame of parameters,
evaluates each row to see if a treaty is signed,
and returns a tibble with the results and original params.

The parameter \code{return_criteria} can contain the following letters:
\itemize{
\item p - will return only parameters different from default. Otherwise all parameters returned
\item a - return all parameters (i.e., it's redundant to include a AND p)
\item u - return utilities of each player
\item d - return depth to water table for each player
}

Note that the cost
of pumping is linear for confined aquifers, and nonlinear for unconfined aquifers, with the
nonlinearity depending on the parameter l, with the key feature that the cost become infinite
as h -> 0. For l = 0, the cost function is exponential and crosses 0 when h_i = dB_i. As l increases
towards 1, the solution becomes more linear when the water table is near the surface. When l == 1,
a linear solution is used and the cost remains linear even when the aquifer is fully depleted
}
\examples{
library(genevoisgame)
evaluate_treaty_cases(rbind(example_params_confined,example_params_confined))
evaluate_treaty_cases(rbind(example_params_unconfined,example_params_unconfined),"qudp")
}
